AWSTemplateFormatVersion: 2010-09-09
Description: Portal Web
Parameters:
  Project:
    Description: Nombre del Proyecto
    Type: String
    Default: ito
  Environment:
    Description: Ambiente en que est√° siendo desplegado el stack
    Type: String
    AllowedValues:
      - dev
      - qa
      - pdn
    Default: dev
  CustomDomainFront:
    Description: Custom Domain Distribution
    Type: String
    Default: "NO"
    AllowedPattern: (NO)|((^https:\/\/)(\w*\d*)((.pragma.com.co)))
  CertificateKey:
    Description: Key del Certificado SSL
    Type: String
    Default: "NO"
    AllowedPattern: (NO)|((\w|\d){8})\-((\w|\d){4})\-((\w|\d){4})\-((\w|\d){4})\-((\w|\d){12})
  ProtocolVersion:
    Description: Version del Protocolo SSL
    Type: String
    Default: TLSv1.2_2021
  CloudFrontStatus:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  ApiGatewayURL:
    Type: String
    Default: https://4uecg97s23.execute-api.us-east-1.amazonaws.com/v1
  HeaderName:
    Type: String
    Default: X-Origin-Verify
  RequiredHeaderSecurity:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
Conditions:
  notCustomDomainFront: !Equals [ "NO", !Ref CustomDomainFront ]
  notCertificateKey: !Equals [ "NO", !Ref CertificateKey ]
  notAlias: !Or [ Condition: notCustomDomainFront, Condition: notCertificateKey ]
  isProduction: !Equals [ "pdn", !Ref Environment ]
  hasHeaderSecurity: !Equals [true, !Ref RequiredHeaderSecurity]
Resources:
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: !If [ notAlias, !Ref AWS::NoValue, !Ref CustomDomainFront ]
        CacheBehaviors:
          - AllowedMethods:
              - HEAD
              - GET
            CachedMethods:
              - HEAD
              - GET
            Compress: false
            DefaultTTL: 86400
            ForwardedValues:
              QueryString: false
            # LambdaFunctionAssociations:
            #   - EventType: origin-request
            #     IncludeBody: false
            #     LambdaFunctionARN: !Ref LambdaEdgeOriginRequestVersion
            MaxTTL: 31536000
            MinTTL: 0
            PathPattern: /cdn*
            # ResponseHeadersPolicyId: !If [ CrearPoliticaHeaders, !Ref PolicyResponseHeaders, !Ref AWS::NoValue ]
            SmoothStreaming: false
            TargetOriginId: !Ref BucketFrontAssets
            ViewerProtocolPolicy: redirect-to-https
          - AllowedMethods:
              - GET
              - HEAD
              # - DELETE
              # - OPTIONS
              # - PATCH
              # - POST
              # - PUT
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            Compress: false
            DefaultTTL: 86400
            ForwardedValues:
              #API Gateway needs Authorization header with ID token generated by Cognito
              Headers:
              - Authorization
              # accept query string
              QueryString: true
            MaxTTL: 31536000
            MinTTL: 0
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac
            PathPattern: /api*
            SmoothStreaming: false
            TargetOriginId: !Sub
                - "Custom-${apiurl}"
                - apiurl: !Select [2, !Split ['/', !Ref ApiGatewayURL]]
            ViewerProtocolPolicy: redirect-to-https
        Comment: !Sub ${Project} Portal Web | ${Environment}
        CustomErrorResponses:
          - ErrorCode: 403
            ResponsePagePath: /index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 300
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: 404
            ErrorCachingMinTTL: 300
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
          CachedMethods:
            - HEAD
            - GET
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            QueryString: false
          # LambdaFunctionAssociations:
          #   - EventType: origin-request
          #     IncludeBody: false
          #     LambdaFunctionARN: !Ref LambdaEdgeOriginRequestVersion
          MaxTTL: 31536000
          MinTTL: 0
          # ResponseHeadersPolicyId: !If [ CrearPoliticaHeaders, !Ref PolicyResponseHeaders, !Ref AWS::NoValue ]
          SmoothStreaming: false
          TargetOriginId: !Ref BucketFrontDefault
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: !Ref CloudFrontStatus
        HttpVersion: http2
        IPV6Enabled: !If [ isProduction, true, false ]
        Origins:
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !GetAtt BucketFrontDefault.DomainName
            Id: !Ref BucketFrontDefault
            OriginPath: ''
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OAIBucketFrontDefault}
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !GetAtt BucketFrontAssets.DomainName
            Id: !Ref BucketFrontAssets
            OriginPath: ''
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OAIBucketFrontAssets}
          - CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginSSLProtocols:
                - TLSv1.2
              OriginProtocolPolicy: https-only  #API Gateway doesn't support unencrypted (HTTP) endpoints
            Id: !Sub
              - "Custom-${apiurl}"
              - apiurl: !Select [2, !Split ['/', !Ref ApiGatewayURL]]
            DomainName: !Select [2, !Split ['/', !Ref ApiGatewayURL]]  #without :: and stage name
            # User will complete the following custom header in console
            OriginCustomHeaders:
             - !If
                - hasHeaderSecurity
                - HeaderName: !Ref HeaderName
                  HeaderValue: !Join ['', ['{{resolve:secretsmanager:', !Ref OriginVerifyHeader, ':SecretString:HEADERVALUE}}' ]]
                - !Ref AWS::NoValue
            OriginPath: !Sub  #stage name as path
              - '/${stage}'
              - stage: !Select [3, !Split ['/', !Ref ApiGatewayURL]]
        PriceClass: !If [ isProduction, PriceClass_All, PriceClass_100 ]
        Restrictions:
          Fn::If:
            - isProduction
            - Ref: AWS::NoValue
            - GeoRestriction:
                Locations:
                  - CO
                  - US
                  - PA
                  - GT
                  - PE
                RestrictionType: whitelist
        ViewerCertificate:
          Fn::If:
            - notAlias
            - CloudFrontDefaultCertificate: true
            - AcmCertificateArn: !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${CertificateKey}
              MinimumProtocolVersion: !Ref ProtocolVersion
              SslSupportMethod: sni-only
  
  OAIBucketFrontDefault:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub access-identity-${BucketFrontDefault}
  BucketFrontDefault:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Project}-${Environment}-site-principal
      # BucketEncryption:
      #   ServerSideEncryptionConfiguration:
      #     - ServerSideEncryptionByDefault:
      #         SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  BucketFrontDefaultPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketFrontDefault
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OAIBucketFrontDefault}
            Action:
              - s3:GetObject
            Resource: !Join
              - ''
              - - !GetAtt BucketFrontDefault.Arn
                - /*
  OAIBucketFrontAssets:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub access-identity-${BucketFrontAssets}
  BucketFrontAssets:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Project}-${Environment}-site-assets
      # BucketEncryption:
      #   ServerSideEncryptionConfiguration:
      #     - ServerSideEncryptionByDefault:
      #         SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  BucketFrontAssetsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketFrontAssets
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OAIBucketFrontAssets}
            Action:
              - s3:GetObject
            Resource: !Join
              - ''
              - - !GetAtt BucketFrontAssets.Arn
                - /*
  
  OriginVerifyHeader:
    Type: AWS::SecretsManager::Secret
    Condition: hasHeaderSecurity
    Properties:
      Description: 'Origin Custom Header value for CloudFront'
      GenerateSecretString:
        SecretStringTemplate: '{"HEADERVALUE": "RandomHeader"}'
        GenerateStringKey: "HEADERVALUE"
        ExcludePunctuation: true


  RotateFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: hasHeaderSecurity
    Properties:
      FunctionName: !Ref OriginSecretRotateFunction
      Action: lambda:InvokeFunction
      Principal: secretsmanager.amazonaws.com


  OriginVerifyRotateSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    Condition: hasHeaderSecurity
    Properties:
      RotationLambdaARN: !GetAtt OriginSecretRotateFunction.Arn
      RotationRules:
        AutomaticallyAfterDays: 7
      SecretId: !Ref OriginVerifyHeader


  OriginSecretRotateFunction:
    Type: AWS::Lambda::Function
    Condition: hasHeaderSecurity
    Properties:
      Description: Serets Manager Rotation Lambda
      Handler: index.handler
      Runtime: python3.9
      # Layers:
      #   - !Ref PythonRequestsLayer
      #VpcConfig: # For accessing RDS instance
      #  SecurityGroupIds:
      #    - !Ref LambdaSecurityGroup
      #  SubnetIds:
      #    - !Ref WAprivateLambdaSubnet1
      Environment:
        Variables:
          WAFACLID: !GetAtt WafWebACLStack.Outputs.WebACLId
          WAFACLNAME: !Select [0, !Split ['|', !GetAtt WafWebACLStack.Outputs.WebACLIdentifier ]]
          CFDISTROID: !Ref CloudFrontDistribution
          ORIGIID: !Sub
              - "Custom-${apiurl}"
              - apiurl: !Select [2, !Split ['/', !Ref ApiGatewayURL]]
          HEADERNAME: !Ref HeaderName
          ORIGINURL: !Ref ApiGatewayURL
          WAFACLRULEID: !GetAtt WafWebACLStack.Outputs.RuleNameHeaderSecurity
          APIENDPOINT: ApiGatewayURL
      Role: !GetAtt OriginSecretRotateExecutionRole.Arn
      Timeout: 60
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Sub ${Project}-${AWS::AccountId}-BucketDeploymentsName
        S3Key: secrets-manager-rotation.zip


  OriginSecretRotateExecutionRole:
    Type: AWS::IAM::Role
    Condition: hasHeaderSecurity
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: OriginVerifyRotatePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogStreams
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*OriginSecretRotateFunction*'
            - Effect: Allow
              Action:
                - secretsmanager:DescribeSecret
                - secretsmanager:GetSecretValue
                - secretsmanager:PutSecretValue
                - secretsmanager:UpdateSecretVersionStage
              Resource: !Ref OriginVerifyHeader
            - Effect: Allow
              Action:
                - secretsmanager:GetRandomPassword
              Resource: '*'
            - Effect: Allow
              Action:
                - cloudfront:GetDistribution
                - cloudfront:GetDistributionConfig
                - cloudfront:ListDistributions
                - cloudfront:UpdateDistribution
              Resource: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'
            - Effect: Allow
              Action:
                - wafv2:*
              Resource:
                - !GetAtt WafWebACLStack.Outputs.WebACLArn
                - '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  

  WafWebACLStack:
    Type: AWS::CloudFormation::Stack
    Condition: hasHeaderSecurity
    Properties:
      TemplateURL: https://test-my-bucket-aws.s3.us-east-1.amazonaws.com/artifacts/nested_stacks/waf.yml
      Parameters:
        Environment: !Ref Environment
        Project: !Ref Project
        Scope: REGIONAL
        ArnAPIGWStage: !Sub
          - 'arn:aws:apigateway:${AWS::Region}::/restapis/${rest_api_id}/stages/${stage_name}'
          - rest_api_id: !Select [0, !Split ['.' , !Select [2, !Split ['/', !Ref ApiGatewayURL]]]]
            stage_name: !Select [3, !Split ['/', !Ref ApiGatewayURL]]
        WithRulesCommonRuleSet: 'true'
        WithRuleIpReputationList: 'true'
        WithRulesKnownBadInputs: 'true'
        WithRuleBlockXssAttack: 'true'
        WithRuleBlockSQLinjectionAttack: 'true'
        WithRuleHeaderSecurity: 'true'
        HeaderName: !Ref HeaderName
        OriginVerifyHeader: !Ref OriginVerifyHeader

        
  