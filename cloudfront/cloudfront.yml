AWSTemplateFormatVersion: 2010-09-09
Description: Portal Web
Parameters:
  CustomDomainFront:
    Description: Custom Domain Distribution
    Type: String
    Default: "NO"
    AllowedPattern: (NO)|((^https:\/\/)(\w*\d*)((.pragma.com.co)))
  CertificateKey:
    Description: Key del Certificado SSL
    Type: String
    Default: "NO"
    AllowedPattern: (NO)|((\w|\d){8})\-((\w|\d){4})\-((\w|\d){4})\-((\w|\d){4})\-((\w|\d){12})
  ProtocolVersion:
    Description: Version del Protocolo SSL
    Type: String
    Default: TLSv1.2_2021
  Environment:
    Description: Ambiente en que está siendo desplegado el stack
    Type: String
    AllowedValues:
      - dev
      - qa
      - pdn
    Default: dev
  Project:
    Description: Nombre del Proyecto
    Type: String
    Default: ito
  CloudFrontStatus:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  DomainBack:
    Type: String
    Default: "NO" # api.retiros.pragma.com.co
    AllowedPattern: (NO)|((^api)\.(\w*\d*)((.pragma.com.co)))
  S3KeyFileLambda:
    Type: String
    Description: Key de S3 del archivo con el código fuente de la lambda
    Default: lambda-deployment-custom-resources.zip
  DeploymentTime:
    Description: Parametro para establecer el la creación de recursos custom
    Type: String
    Default: 0
Conditions:
  SinCustomDomainFront: !Equals [ "NO", !Ref CustomDomainFront ]
  SinCertificateKey: !Equals [ "NO", !Ref CertificateKey ]
  SinAlias: !Or [ Condition: SinCustomDomainFront, Condition: SinCertificateKey ]
  SinDomainBack: !Equals [ "NO", !Ref DomainBack ]
  IsProduction: !Equals [ "pdn", !Ref Environment ]
  CrearPoliticaHeaders: !Not [ !And [ Condition: SinAlias, Condition: SinDomainBack ] ]
Resources:
  # RoleLambdaEdgeOriginRequest:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - lambda.amazonaws.com
  #               - edgelambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     Description: Rol por defecto para lambda-edge
  #     MaxSessionDuration: 3600
  #     RoleName: !Sub ${Project}-${Environment}-role-lambda-edge-origin-request
  # LambdaEdgeOriginRequest:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Code:
  #       S3Bucket:
  #         Fn::ImportValue: !Sub ${Project}-${Environment}-BucketDeploymentsName
  #       S3Key: !Ref S3KeyFileLambda
  #     Description: Lambda Edge de Origin Request
  #     FunctionName: !Sub ${Project}-${Environment}-lambda-edge-origin-request
  #     Handler: index.handler
  #     MemorySize: 128
  #     Role: !GetAtt RoleLambdaEdgeOriginRequest.Arn
  #     Runtime: nodejs16.x
  #     Timeout: 5
  # LambdaEdgeOriginRequestVersion:
  #   Type: Custom::LambdaVersion
  #   DeletionPolicy: Retain
  #   Properties:
  #     ServiceToken:
  #       Fn::ImportValue: !Sub ${Project}-${Environment}-DeploymentLambdaArn
  #     FunctionName: !Ref LambdaEdgeOriginRequest
  #     DeploymentTime: !Ref DeploymentTime
  PolicyResponseHeaders:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Condition: CrearPoliticaHeaders
    Properties: 
      ResponseHeadersPolicyConfig:
        Name: !Sub ${Project}PolicyHeadersSeguridad${Project}${Environment}
        Comment: !Sub Policy Headers de seguridad para ${Project}-${Environment}
        CorsConfig: 
          AccessControlAllowCredentials: true
          AccessControlAllowHeaders: 
            Items:
              - 'x-permitted-cross-domain-policies'
              - 'Cache-Control'
              - 'Pragma'
              - 'Server'
          AccessControlAllowMethods: 
            Items: 
              - GET
              - HEAD
          AccessControlAllowOrigins:
            Items:
              - !Sub https://${CustomDomainFront}
          AccessControlMaxAgeSec: 600
          OriginOverride: true
        CustomHeadersConfig:
          Items:
            - Header: x-permitted-cross-domain-policies
              Override: true
              Value: none
            - Header: Cache-Control
              Override: true
              Value: no-store
            - Header: Pragma
              Override: true
              Value: no-cache
            - Header: Server
              Override: true
              Value: '-'
            - Header: Permissions-Policy
              Override: true
              Value: !Sub 'fullscreen=(self "https://${CustomDomainFront}")'
        SecurityHeadersConfig:
          ContentSecurityPolicy:
            ContentSecurityPolicy: !Sub default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.google.com https://www.gstatic.com; style-src 'self' 'unsafe-inline'; style-src-elem 'self' 'unsafe-inline' https://fonts.googleapis.com; object-src 'self'; font-src https://fonts.gstatic.com; connect-src 'self' https://${DomainBack}; img-src 'self' https://${CustomDomainFront}; frame-src https://www.google.com
            Override: true
          ContentTypeOptions:
            Override: true
          FrameOptions:
            FrameOption: DENY
            Override: true
          ReferrerPolicy:
            Override: true
            ReferrerPolicy: same-origin
          StrictTransportSecurity:
            AccessControlMaxAgeSec: 31536000
            IncludeSubdomains: true
            Override: true
            Preload: true
          XSSProtection:
            ModeBlock: true
            Override: true
            Protection: true
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: !If [ SinAlias, !Ref AWS::NoValue, !Ref CustomDomainFront ]
        CacheBehaviors:
          - AllowedMethods:
              - HEAD
              - GET
            CachedMethods:
              - HEAD
              - GET
            Compress: false
            DefaultTTL: 86400
            ForwardedValues:
              QueryString: false
            # LambdaFunctionAssociations:
            #   - EventType: origin-request
            #     IncludeBody: false
            #     LambdaFunctionARN: !Ref LambdaEdgeOriginRequestVersion
            MaxTTL: 31536000
            MinTTL: 0
            PathPattern: /cdn*
            ResponseHeadersPolicyId: !If [ CrearPoliticaHeaders, !Ref PolicyResponseHeaders, !Ref AWS::NoValue ]
            SmoothStreaming: false
            TargetOriginId: !Ref BucketFrontAssets
            ViewerProtocolPolicy: redirect-to-https
        Comment: !Sub ${Project} Portal Web | ${Environment}
        CustomErrorResponses:
          - ErrorCode: 403
            ResponsePagePath: /index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 300
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: 404
            ErrorCachingMinTTL: 300
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
          CachedMethods:
            - HEAD
            - GET
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            QueryString: false
          # LambdaFunctionAssociations:
          #   - EventType: origin-request
          #     IncludeBody: false
          #     LambdaFunctionARN: !Ref LambdaEdgeOriginRequestVersion
          MaxTTL: 31536000
          MinTTL: 0
          ResponseHeadersPolicyId: !If [ CrearPoliticaHeaders, !Ref PolicyResponseHeaders, !Ref AWS::NoValue ]
          SmoothStreaming: false
          TargetOriginId: !Ref BucketFrontDefault
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: !Ref CloudFrontStatus
        HttpVersion: http2
        IPV6Enabled: !If [ IsProduction, true, false ]
        Origins:
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !GetAtt BucketFrontDefault.DomainName
            Id: !Ref BucketFrontDefault
            OriginPath: ''
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OAIBucketFrontDefault}
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !GetAtt BucketFrontAssets.DomainName
            Id: !Ref BucketFrontAssets
            OriginPath: ''
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OAIBucketFrontAssets}
        PriceClass: !If [ IsProduction, PriceClass_All, PriceClass_100 ]
        Restrictions:
          Fn::If:
            - IsProduction
            - Ref: AWS::NoValue
            - GeoRestriction:
                Locations:
                  - CO
                  - US
                  - PA
                  - GT
                  - PE
                RestrictionType: whitelist
        ViewerCertificate:
          Fn::If:
            - SinAlias
            - CloudFrontDefaultCertificate: true
            - AcmCertificateArn: !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${CertificateKey}
              MinimumProtocolVersion: !Ref ProtocolVersion
              SslSupportMethod: sni-only
  OAIBucketFrontDefault:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub access-identity-${BucketFrontDefault}
  BucketFrontDefault:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Project}-${Environment}-site-principal
      # BucketEncryption:
      #   ServerSideEncryptionConfiguration:
      #     - ServerSideEncryptionByDefault:
      #         SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  BucketFrontDefaultPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketFrontDefault
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OAIBucketFrontDefault}
            Action:
              - s3:GetObject
            Resource: !Join
              - ''
              - - !GetAtt BucketFrontDefault.Arn
                - /*
  OAIBucketFrontAssets:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub access-identity-${BucketFrontAssets}
  BucketFrontAssets:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Project}-${Environment}-site-assets
      # BucketEncryption:
      #   ServerSideEncryptionConfiguration:
      #     - ServerSideEncryptionByDefault:
      #         SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  BucketFrontAssetsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketFrontAssets
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OAIBucketFrontAssets}
            Action:
              - s3:GetObject
            Resource: !Join
              - ''
              - - !GetAtt BucketFrontAssets.Arn
                - /*