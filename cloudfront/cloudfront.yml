AWSTemplateFormatVersion: 2010-09-09
Description: Portal Web
Parameters:
  Project:
    Description: Nombre del Proyecto
    Type: String
    Default: ito
  Environment:
    Description: Ambiente en que est√° siendo desplegado el stack
    Type: String
    AllowedValues:
      - dev
      - qa
      - pdn
    Default: dev
  CustomDomainFront:
    Description: Custom Domain Distribution
    Type: String
    Default: "NO"
    AllowedPattern: (NO)|((^https:\/\/)(\w*\d*)((.pragma.com.co)))
  CertificateKey:
    Description: Key del Certificado SSL
    Type: String
    Default: "NO"
    AllowedPattern: (NO)|((\w|\d){8})\-((\w|\d){4})\-((\w|\d){4})\-((\w|\d){4})\-((\w|\d){12})
  ProtocolVersion:
    Description: Version del Protocolo SSL
    Type: String
    Default: TLSv1.2_2021
  CloudFrontStatus:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  ApiGatewayURL:
    Type: String
    Default: ''
  HeaderName:
    Type: String
    Default: ''
  ArnSecretOriginVerifyHeader:
    Type: String
    Default: ''
Conditions:
  SinCustomDomainFront: !Equals [ "NO", !Ref CustomDomainFront ]
  SinCertificateKey: !Equals [ "NO", !Ref CertificateKey ]
  SinAlias: !Or [ Condition: SinCustomDomainFront, Condition: SinCertificateKey ]
  IsProduction: !Equals [ "pdn", !Ref Environment ]
Resources:
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: !If [ SinAlias, !Ref AWS::NoValue, !Ref CustomDomainFront ]
        CacheBehaviors:
          - AllowedMethods:
              - HEAD
              - GET
            CachedMethods:
              - HEAD
              - GET
            Compress: false
            DefaultTTL: 86400
            ForwardedValues:
              QueryString: false
            # LambdaFunctionAssociations:
            #   - EventType: origin-request
            #     IncludeBody: false
            #     LambdaFunctionARN: !Ref LambdaEdgeOriginRequestVersion
            MaxTTL: 31536000
            MinTTL: 0
            PathPattern: /cdn*
            # ResponseHeadersPolicyId: !If [ CrearPoliticaHeaders, !Ref PolicyResponseHeaders, !Ref AWS::NoValue ]
            SmoothStreaming: false
            TargetOriginId: !Ref BucketFrontAssets
            ViewerProtocolPolicy: redirect-to-https
          - AllowedMethods:
              - GET
              - HEAD
              # - DELETE
              # - OPTIONS
              # - PATCH
              # - POST
              # - PUT
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            Compress: false
            DefaultTTL: 86400
            ForwardedValues:
              #API Gateway needs Authorization header with ID token generated by Cognito
              Headers:
              - Authorization
              # accept query string
              QueryString: true
            MaxTTL: 31536000
            MinTTL: 0
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac
            PathPattern: /api*
            SmoothStreaming: false
            TargetOriginId: !Sub
                - "Custom-${apiurl}"
                - apiurl: !Select [2, !Split ['/', !Ref ApiGatewayURL]]
            ViewerProtocolPolicy: redirect-to-https
        Comment: !Sub ${Project} Portal Web | ${Environment}
        CustomErrorResponses:
          - ErrorCode: 403
            ResponsePagePath: /index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 300
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: 404
            ErrorCachingMinTTL: 300
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
          CachedMethods:
            - HEAD
            - GET
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            QueryString: false
          # LambdaFunctionAssociations:
          #   - EventType: origin-request
          #     IncludeBody: false
          #     LambdaFunctionARN: !Ref LambdaEdgeOriginRequestVersion
          MaxTTL: 31536000
          MinTTL: 0
          # ResponseHeadersPolicyId: !If [ CrearPoliticaHeaders, !Ref PolicyResponseHeaders, !Ref AWS::NoValue ]
          SmoothStreaming: false
          TargetOriginId: !Ref BucketFrontDefault
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: !Ref CloudFrontStatus
        HttpVersion: http2
        IPV6Enabled: !If [ IsProduction, true, false ]
        Origins:
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !GetAtt BucketFrontDefault.DomainName
            Id: !Ref BucketFrontDefault
            OriginPath: ''
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OAIBucketFrontDefault}
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !GetAtt BucketFrontAssets.DomainName
            Id: !Ref BucketFrontAssets
            OriginPath: ''
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${OAIBucketFrontAssets}
          - CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginSSLProtocols:
                - TLSv1.2
              OriginProtocolPolicy: https-only  #API Gateway doesn't support unencrypted (HTTP) endpoints
            Id: !Sub
              - "Custom-${apiurl}"
              - apiurl: !Select [2, !Split ['/', !Ref ApiGatewayURL]]
            DomainName: !Select [2, !Split ['/', !Ref ApiGatewayURL]]  #without :: and stage name
            # User will complete the following custom header in console
            # OriginCustomHeaders:
            #  - HeaderName: !Ref HeaderName
            #    HeaderValue: !Join ['', ['{{resolve:secretsmanager:', !Ref ArnSecretOriginVerifyHeader, ':SecretString:HEADERVALUE}}' ]]
            OriginPath: !Sub  #stage name as path
              - '/${stage}'
              - stage: !Select [3, !Split ['/', !Ref ApiGatewayURL]]
        PriceClass: !If [ IsProduction, PriceClass_All, PriceClass_100 ]
        Restrictions:
          Fn::If:
            - IsProduction
            - Ref: AWS::NoValue
            - GeoRestriction:
                Locations:
                  - CO
                  - US
                  - PA
                  - GT
                  - PE
                RestrictionType: whitelist
        ViewerCertificate:
          Fn::If:
            - SinAlias
            - CloudFrontDefaultCertificate: true
            - AcmCertificateArn: !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${CertificateKey}
              MinimumProtocolVersion: !Ref ProtocolVersion
              SslSupportMethod: sni-only
  
  OAIBucketFrontDefault:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub access-identity-${BucketFrontDefault}
  BucketFrontDefault:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Project}-${Environment}-site-principal
      # BucketEncryption:
      #   ServerSideEncryptionConfiguration:
      #     - ServerSideEncryptionByDefault:
      #         SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  BucketFrontDefaultPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketFrontDefault
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OAIBucketFrontDefault}
            Action:
              - s3:GetObject
            Resource: !Join
              - ''
              - - !GetAtt BucketFrontDefault.Arn
                - /*
  OAIBucketFrontAssets:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub access-identity-${BucketFrontAssets}
  BucketFrontAssets:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Project}-${Environment}-site-assets
      # BucketEncryption:
      #   ServerSideEncryptionConfiguration:
      #     - ServerSideEncryptionByDefault:
      #         SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  BucketFrontAssetsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketFrontAssets
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OAIBucketFrontAssets}
            Action:
              - s3:GetObject
            Resource: !Join
              - ''
              - - !GetAtt BucketFrontAssets.Arn
                - /*