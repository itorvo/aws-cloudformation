AWSTemplateFormatVersion: 2010-09-09
Description: "Creacion de VPC"

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: "A friendly environment name that will be used for namespacing all resources (valid options are dev, qa or production)"
    AllowedValues: [ dev, qa, prod ]
  Project:
    Type: String
    Default: ito
    AllowedPattern: ^([a-z]|[0-9])*$
  RequireXRay:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'false'
      - 'true'
  RequireECR:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'false'
      - 'true'
  RequireLogs:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'false'
      - 'true'
  RequireAPI:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'false'
      - 'true'
  RequireS3:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'false'
      - 'true'
  RequireDynamo:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'false'
      - 'true'
  RequireSecretsManager:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'false'
      - 'true'
Conditions:
  createXRay: !Equals [ 'true', !Ref RequireXRay ]
  createECR: !Equals [ 'true', !Ref RequireECR ]
  createLogs: !Equals [ 'true', !Ref RequireLogs ]
  createAPI: !Equals [ 'true', !Ref RequireAPI ]
  createS3: !Equals [ 'true', !Ref RequireS3 ]
  createDynamo: !Equals [ 'true', !Ref RequireDynamo ]
  createSecretsManager: !Equals [ 'true', !Ref RequireSecretsManager ]
Resources:
## VPC Endpoints ##
  XRay:
    Type: AWS::EC2::VPCEndpoint
    Condition: createXRay
    Properties:
      PrivateDnsEnabled: 'true'
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.xray
      VpcId:
        Fn::ImportValue:
          !Sub ${Project}-${Environment}-VpcId
      SubnetIds:
        - Fn::ImportValue:
            !Sub ${Project}-${Environment}-SrvSub1
      SecurityGroupIds:
        - Fn::ImportValue:
            !Sub ${Project}-${Environment}-SecurityGroupVpcEndPoints
  
  CloudWatchLogs:
    Type: AWS::EC2::VPCEndpoint
    Condition: createLogs
    Properties:
      PrivateDnsEnabled: 'true'
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcId:
        Fn::ImportValue:
          !Sub ${Project}-${Environment}-VpcId
      SubnetIds:
        - Fn::ImportValue:
            !Sub ${Project}-${Environment}-SrvSub1
      SecurityGroupIds:
        - Fn::ImportValue:
            !Sub ${Project}-${Environment}-SecurityGroupVpcEndPoints
  
  EcrApi:
    Type: AWS::EC2::VPCEndpoint
    Condition: createECR
    Properties:
      PrivateDnsEnabled: 'true'
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      VpcId:
        Fn::ImportValue:
          !Sub ${Project}-${Environment}-VpcId
      SubnetIds:
        - Fn::ImportValue:
            !Sub ${Project}-${Environment}-SrvSub1
      SecurityGroupIds:
        - Fn::ImportValue:
            !Sub ${Project}-${Environment}-SecurityGroupVpcEndPoints
  
  EcrDkr:
    Type: AWS::EC2::VPCEndpoint
    Condition: createECR
    Properties:
      PrivateDnsEnabled: 'true'
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VpcEndpointType: Interface
      VpcId:
        Fn::ImportValue:
          !Sub ${Project}-${Environment}-VpcId
      SubnetIds:
        - Fn::ImportValue:
            !Sub ${Project}-${Environment}-SrvSub1
      SecurityGroupIds:
        - Fn::ImportValue:
            !Sub ${Project}-${Environment}-SecurityGroupVpcEndPoints

  ApiGateway:
    Type: AWS::EC2::VPCEndpoint
    Condition: createAPI
    Properties:
      PrivateDnsEnabled: 'true'
      ServiceName: !Sub com.amazonaws.${AWS::Region}.execute-api
      VpcEndpointType: Interface
      VpcId:
        Fn::ImportValue:
          !Sub ${Project}-${Environment}-VpcId
      SubnetIds:
        - Fn::ImportValue:
            !Sub ${Project}-${Environment}-SrvSub1
      SecurityGroupIds:
        - Fn::ImportValue:
            !Sub ${Project}-${Environment}-SecurityGroupVpcEndPoints

  S3:
    Type: AWS::EC2::VPCEndpoint
    Condition: createS3
    Properties:
      PrivateDnsEnabled: 'false'
      VpcEndpointType: Gateway
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId:
        Fn::ImportValue:
          !Sub ${Project}-${Environment}-VpcId
      RouteTableIds:
        - Fn::ImportValue:
            !Sub ${Project}-${Environment}-PrivateRouteTable

  DynamoDb:
    Type: AWS::EC2::VPCEndpoint
    Condition: createDynamo
    Properties:
      PrivateDnsEnabled: 'false'
      VpcEndpointType: Gateway
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcId:
        Fn::ImportValue:
          !Sub ${Project}-${Environment}-VpcId
      RouteTableIds:
        - Fn::ImportValue:
            !Sub ${Project}-${Environment}-PrivateRouteTable

  SecretsManager:
    Type: AWS::EC2::VPCEndpoint
    Condition: createSecretsManager
    Properties:
      PrivateDnsEnabled: 'true'
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      VpcEndpointType: Interface
      VpcId:
        Fn::ImportValue:
          !Sub ${Project}-${Environment}-VpcId
      SubnetIds:
        - Fn::ImportValue:
            !Sub ${Project}-${Environment}-SrvSub1
      SecurityGroupIds:
        - Fn::ImportValue:
            !Sub ${Project}-${Environment}-SecurityGroupVpcEndPoints
# Outputs:
#   VPCEXRay:
#     Condition: createResources
#     Description: VPC Endpoint X-Ray
#     Value: !Ref XRay
#     Export:
#       Name: !Sub ${Project}-${Environment}-VPCE-X-Ray
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: Datos del Proyecto
        Parameters: 
          - Project
          - Environment
      - Label: 
          default: VPC EndPoints
        Parameters: 
          - RequireXRay
          - RequireECR
          - RequireLogs
          - RequireAPI
          - RequireS3
          - RequireDynamo
    ParameterLabels: 
      Project: 
        default: Nombre del Proyecto
      Environment: 
        default: Nombre del Ambiente
      RequireXRay: 
        default: Crear Endpoint para X-Ray
      RequireECR: 
        default: Crear Endpoint para ECR
      RequireLogs: 
        default: Crear Endpoint para CloudWatch Logs
      RequireAPI: 
        default: Crear Endpoint para API Gateway
      RequireS3: 
        default: Crear Endpoint para S3
      RequireDynamo: 
        default: Crear Endpoints para DynamoDb
      RequireSecretsManager: 
        default: Crear Endpoints para Secrets Manager