AWSTemplateFormatVersion: 2010-09-09
Description: Api gateway
Parameters:
  DeploymentTime:
    Description: Parametro para establecer el ambiente
    Type: String
    Default: 0
  AllowLogs:
    Description: Parametro para establecer el ambiente
    Type: String
    Default: 0
    AllowedValues:
      - 1
      - 0
  Environment:
    Description: Ambiente en que está siendo desplegado el stack
    Type: String
    AllowedValues:
      - dev
      - qa
      - pdn
    Default: dev
  Project:
    Description: Nombre del Proyecto
    Type: String
    Default: copapragma
  S3KeyFileLambdaAuthorizer:
    Description: Key en S3 del archivo con el código de la lambda authorizer
    Type: String
    Default: authorizer-package095019.zip
  S3KeyFileLambdaBackEnd:
    Description: Key en S3 del archivo con el código de la lambda backend
    Type: String
    Default: backend-package095019.zip
  CertificateKey:
    Description: Key del Certificado SSL
    Type: String
    Default: "NO"
    AllowedPattern: (NO)|((\w|\d){8})\-((\w|\d){4})\-((\w|\d){4})\-((\w|\d){4})\-((\w|\d){12})
  DomainBack:
    Type: String
    Default: "NO" # api.retiros.pragma.com.co
    AllowedPattern: (NO)|((^api)\.(\w*\d*)((.pragma.com.co)))
  DummyAuthorizer:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  DefaultEndpoint:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
Conditions:
  EnableLogs: !Equals [ 1, !Ref AllowLogs ]
  SinDominio: !Equals [ "NO", !Ref DomainBack ]
  SinCertificado: !Equals [ "NO", !Ref CertificateKey ]
  SinCertificadoNiDominio: !Or [ Condition: SinDominio, Condition: SinCertificado ]
  SinCustomDomain: !Not [ Condition: SinCertificadoNiDominio ]
  isDummyAuth: !Equals [ true, !Ref DummyAuthorizer ]
  EnableDefaultEndpoint: !Equals [ true, !Ref DefaultEndpoint ]
Resources:
  
  LambdaAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns: !If [ EnableLogs, arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole, !Ref AWS::NoValue ]
      RoleName: !Sub ${Project}-${Environment}-role-lambda-authorizer
  LambdaAuthorizer:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue: !Sub ${Project}-${Environment}-BucketDeploymentsName
        S3Key: !Ref S3KeyFileLambdaAuthorizer
      Description: Lambda prueba deploy
      FunctionName: !Sub ${Project}-${Environment}-lambda-authorizer
      Handler: !If [ isDummyAuth, index.lambda_handler_dummy, index.handler ]
      MemorySize: 128
      Role: !GetAtt LambdaAuthorizerRole.Arn
      Runtime: python3.9
      Timeout: 128
  LambdaAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaAuthorizer
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiRest}/*
  LambdaBackendRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns: !If [ EnableLogs, arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole, !Ref AWS::NoValue ]
      RoleName: !Sub ${Project}-${Environment}-role-lambda-backend
  LambdaBackend:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue: !Sub ${Project}-${Environment}-BucketDeploymentsName
        S3Key: !Ref S3KeyFileLambdaBackEnd
      Description: Lambda prueba deploy
      FunctionName: !Sub ${Project}-${Environment}-lambda-backend
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaBackendRole.Arn
      Runtime: nodejs16.x
      Timeout: 128
  LambdaBackendPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaBackend
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiRest}/*
  ApiRest:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: API Gateway Proyecto Retiros | Pragma
      Name: !Sub ${Project}-${Environment}-RetirosPragma
      EndpointConfiguration:
        Types:
          - REGIONAL
      ApiKeySourceType: HEADER
      Body:
        openapi: "3.0.1"
        info:
          title: !Sub ${Project}-${Environment}-RetirosPragma
          description: !Sub ${Project}-${Environment}-RetirosPragma
          version: "2022-11-11T04:15:15Z"
        servers:
        - x-amazon-apigateway-endpoint-configuration:
            disableExecuteApiEndpoint: !If [ EnableDefaultEndpoint, true, false ]
        paths:
          /api-retiros:
            get:
              parameters:
              - name: "Authorization"
                in: "header"
                required: true
                schema:
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              security:
              - AuthorizerLamba: []
              x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
              \ and headers"
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri:
                  Fn::Sub:
                    - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArnLambda}/invocations
                    - ArnLambda: !GetAtt LambdaBackend.Arn
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
            post:
              parameters:
              - name: "Authorization"
                in: "header"
                required: true
                schema:
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              security:
              - AuthorizerLamba: []
              x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
              \ and headers"
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri:
                  Fn::Sub:
                    - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArnLambda}/invocations
                    - ArnLambda: !GetAtt LambdaBackend.Arn
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /api-retiros-public:
            get:
              parameters:
              - name: "Authorization"
                in: "header"
                required: true
                schema:
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri:
                  Fn::Sub:
                    - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArnLambda}/invocations
                    - ArnLambda: !GetAtt LambdaBackend.Arn
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
            options:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
        components:
          schemas:
            Empty:
              title: "Empty Schema"
              type: "object"
          securitySchemes:
            api_key:
              type: "apiKey"
              name: "x-api-key"
              in: "header"
            AuthorizerLamba:
              type: "apiKey"
              name: "Authorization"
              in: "header"
              x-amazon-apigateway-authtype: "custom"
              x-amazon-apigateway-authorizer:
                authorizerUri:
                  Fn::Sub:
                    - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ArnLambda}/invocations
                    - ArnLambda: !GetAtt LambdaAuthorizer.Arn
                authorizerResultTtlInSeconds: 300
                identitySource: "method.request.header.Authorization"
                type: "request"
        x-amazon-apigateway-gateway-responses:
          DEFAULT_4XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          DEFAULT_5XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        x-amazon-apigateway-request-validators:
          Validate body, query string parameters, and headers:
            validateRequestParameters: true
            validateRequestBody: true
  Deployment:
    Type: Custom::ApiDeployment
    DeletionPolicy: Retain
    Properties:
      ServiceToken:
        Fn::ImportValue: !Sub ${Project}-${Environment}-DeploymentLambdaArn
      restApiId: !Ref ApiRest
      description: !Sub Deployment in ${DeploymentTime}
      DeploymentTime: !Ref DeploymentTime
  Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref Deployment
      RestApiId: !Ref ApiRest
      Description: Default Stage
      StageName: !Ref Environment
      Variables:
        host: test
      # TracingEnabled: true
      # AccessLogSetting:
      #   DestinationArn:
      #     Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ProcessRefound:*
      #   Format: '{ "requestId": "$context.requestId", "DomainName": "$context.domainName", "SourceIp": "$context.identity.sourceIp", "APIId": "$context.apiId", "ip": "$context.identity.sourceIp", "caller": "$context.identity.caller", "user": "$context.identity.user", "requestTime": "$context.requestTime", "httpMethod": "$context.httpMethod", "resourcePath": "$context.resourcePath", "status": "$context.status", "protocol": "$context.protocol", "responseLength": "$context.responseLength", "Stage": "$context.stage", "errormessage": "$context.error.message", "errormessageString": "$context.error.messageString", "responseType": "$context.error.responseType", "identitycaller": "$context.identity.caller", "integrationerror": "$context.integration.error", "integrationintegrationStatus": "$context.integration.integrationStatus", "integrationErrorMessage": "$context.integrationErrorMessage", "integrationrequestId": "$context.integration.requestId", "EndpointRequestId": "$context.awsEndpointRequestId", "awsEndpointRequestId2": "$context.awsEndpointRequestId2", "clientCertserialNumber": "$context.identity.clientCert.serialNumber", "clientCertvaliditynotBefore": "$context.identity.clientCert.validity.notBefore", "clientCertvaliditynotAfter": "$context.identity.clientCert.validity.notAfter", "requestOverrideheadername": "$context.requestOverride.header.header_name", "requestOverridepathname": "$context.requestOverride.path.path_name", "responseOverrideheadername": "$context.responseOverride.header.header_name", "responseOverridestatus": "$context.responseOverride.status"}'
      # MethodSettings:
      #   - DataTraceEnabled: true
      #     HttpMethod: '*'
      #     LoggingLevel: INFO
      #     MetricsEnabled: true
      #     ResourcePath: /*
      #     ThrottlingBurstLimit: 5000
      #     ThrottlingRateLimit: 10000

  APICustomDomainName:
    Type: AWS::ApiGateway::DomainName
    Condition: SinCustomDomain
    Properties:
      RegionalCertificateArn: !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${CertificateKey}
      DomainName: !Ref DomainBack
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2

  MappingAPI:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: SinCustomDomain
    Properties: 
      DomainName: !Ref APICustomDomainName
      RestApiId: !Ref ApiRest
      Stage: !Ref Environment

Outputs:
  APIRest:
    Description: ApiRest id generated
    Value: !Ref ApiRest
    Export:
      Name: !Sub ${Project}-${Environment}-APIRestId
