---
AWSTemplateFormatVersion: 2010-09-09
Description: Deploy Fargate Ecs for Kiire - By Pragma->CloudOps
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - qa
      - pdn
  Project:
    Description: Nombre del Proyecto.
    Type: String
    Default: kiire
  EnablePublicIp:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  TypeLoadBalancer:
    Type: String
    Default: network
    AllowedValues:
      - network
      - application
      - gateway
  EnableVpcLink:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  EnableLoadBalancer:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  EnablePrivateDNS:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
Conditions:  
  isPublic: !Equals [ true, !Ref EnablePublicIp ]
  CEnablePrivateDNS: !Equals [ true, !Ref EnablePrivateDNS ]
  CEnableLoadBalancer: !Equals [ true, !Ref EnableLoadBalancer ]
  CEnableVpcLink:
    !And
      - !Condition CEnableLoadBalancer
      - !Condition isPublic
      - !Equals [ true, !Ref EnableVpcLink]

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${Project}-${Environment}-Cluster
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
  
  PrivateNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Condition: CEnablePrivateDNS
    Properties:
        Name: !Sub ${Project}.${Environment}
        Description: !Sub Private DNS for ${Project} in environment ${Environment}
        Vpc:
          Fn::ImportValue:
            !Sub "${Project}-${Environment}-VpcId"
  
  FargateContainerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: kiire-sgr-services-dev
      GroupDescription: Access to the Fargate containers
      Tags:
        - Key: Name
          Value: kiire-sgr-services-dev
      VpcId:
        Fn::ImportValue:
          !Sub "${Project}-${Environment}-VpcId"
  EcsSecurityGroupIngressFromVPC:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from VPC services
      GroupId: !Ref FargateContainerSecurityGroup
      CidrIp: 172.22.0.0/16
      FromPort: 9080
      ToPort: 9086
      IpProtocol: tcp
  EcsSecurityGroupIngressFromSelf:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref FargateContainerSecurityGroup
  
  NetworkLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Condition: CEnableLoadBalancer
    Properties:
      Name: !Sub ${Project}-${Environment}-${TypeLoadBalancer}
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: true
      Scheme: !If [ isPublic, internet-facing, internal ]
      Subnets:
        - Fn::ImportValue:
            !Sub "${Project}-${Environment}-SubnetPrivateApp1"
        - Fn::ImportValue:
            !Sub "${Project}-${Environment}-SubnetPrivateApp2"
      Tags:
        - Key: Name
          Value: !Sub ${Project}-${Environment}-${TypeLoadBalancer}
      Type: !Ref TypeLoadBalancer
  
  VpcLink:
    Type: 'AWS::ApiGateway::VpcLink'
    Condition: CEnableVpcLink
    Properties:
      Description: !Sub VPC link connects to internal ${Project}-${Environment}-${TypeLoadBalancer}
      Name: !Sub ${Project}-${Environment}-${TypeLoadBalancer}
      TargetArns:
        - !Ref NetworkLoadBalancer

Outputs:
  ClusterName:
    Description: Nombre del Cluster de ECS
    Value: !Ref Cluster
    Export:
      Name: !Sub ${Project}-${Environment}-ClusterName
  SecurityGroupServices:
    Description: "ID Security Group de Servicios de ECS"
    Value: !Ref FargateContainerSecurityGroup
    Export:
      Name: SecurityGroupServices
