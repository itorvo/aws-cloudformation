{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Api gateway",
  "Parameters": {
    "DeploymentTime": {
      "Description": "Parametro para establecer el ambiente",
      "Type": "String",
      "Default": "0"
    },
    "AllowLogs": {
      "Description": "Parametro para establecer el ambiente",
      "Type": "String",
      "Default": "0"
    }
  },
  "Conditions":{
    "EnableLogs": { "Fn::Equals": [ "1", { "Ref": "AllowLogs" } ] }
  },
  "Resources": {
    "LambdaTest": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "'use strict';",
                "",
                "// Greeter Lambda",
                "exports.handler = (event, context, callback) => {",
                "  console.log('Event:', JSON.stringify(event));",
                "  const name = event.name || 'Mundo';",
                "  const response = {greeting: `Hello, ${name}!`};",
                "  callback(null, response);",
                "};"
              ]
            ]
          }
        },
        "Description": "Lambda prueba deploy",
        "FunctionName": "lambda-test",
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": { "Fn::If": [ "EnableLogs",
          { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/RoleLambdaExecutionWithLogs" },
          { "Fn::Sub":"arn:aws:iam::${AWS::AccountId}:role/RoleLambdaExecution" } ]
        },
        "Runtime": "nodejs16.x",
        "Timeout": 128
      }
    },
    "LambdaTestPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Ref": "LambdaTest" },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": { "Fn::Join": [ "", [ "arn:aws:execute-api:", { "Fn::Sub": "${AWS::Region}:${AWS::AccountId}:" }, { "Ref": "ApiRest" }, "/*" ] ] }
      }
    },
    "ApiRest": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Description": "api deploy cloudformation",
        "Name": "test.api",
        "EndpointConfiguration": {
          "Types": [ "REGIONAL" ]
        },
        "ApiKeySourceType": "HEADER",
        "Body": {
          "openapi": "3.0.1",
          "info": {
            "title": "test body",
            "version": "2019-11-07T14:18:00Z"
          },
          "paths": {
            "/test": {
              "get": {
                "parameters": [
                  {
                    "name": "Authorization",
                    "in": "header",
                    "required": false,
                    "type": "string"
                  }
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": { "type": "string" }
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": { "Fn::Join": [ "", [ "arn:aws:apigateway:", { "Fn::Sub": "${AWS::Region}:" }, "lambda:path/2015-03-31/functions/arn:aws:lambda:", { "Fn::Sub": "${AWS::Region}:" }, { "Fn::Sub": "${AWS::AccountId}:" }, "function:lambda-test/invocations" ] ] },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": { "method.response.header.Access-Control-Allow-Origin": "'*'" }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              },
              "post": {
                "parameters": [
                  {
                    "name": "Authorization",
                    "in": "header",
                    "required": false,
                    "type": "string"
                  }
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": { "type": "string" }
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": { "Fn::Join": [ "", [ "arn:aws:apigateway:", { "Fn::Sub": "${AWS::Region}:" }, "lambda:path/2015-03-31/functions/arn:aws:lambda:", { "Fn::Sub": "${AWS::Region}:" }, { "Fn::Sub": "${AWS::AccountId}:" }, "function:lambda-test/invocations" ] ] },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": { "method.response.header.Access-Control-Allow-Origin": "'*'" }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            }
          },
          "components": {
            "schemas": {
              "Empty": {
                "title": "Empty Schema",
                "type": "object"
              }
            }
          },
          "x-amazon-apigateway-policy": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": "*",
                "Action": "execute-api:Invoke",
                "Resource": { "Fn::Join": [ "", [ "arn:", "aws:", "execute-api:", { "Fn::Sub": "${AWS::Region}:" }, { "Fn::Sub": "${AWS::AccountId}" }, ":*/*" ] ] }
              }
            ]
          },
          "x-amazon-apigateway-binary-media-types": [ "*/*" ]
        }
      }
    },
    "Deployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "Description": {"Fn::Sub": [ "new deployment ${time}", { "time": { "Ref": "DeploymentTime" } } ] },
        "RestApiId": { "Ref": "ApiRest" }
      }
    },
    "Stage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": { "Ref": "Deployment" },
        "RestApiId": { "Ref": "ApiRest" },
        "Description": "stage deploy",
        "StageName": "v1",
        "Variables": {
          "host": "test",
          "variable1": "test",
          "variable2": "test",
          "variable3": "test"
        },
        "TracingEnabled": true,
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ProcessRefound:*"
          },
          "Format": "{ \"requestId\": \"$context.requestId\", \"DomainName\": \"$context.domainName\", \"SourceIp\": \"$context.identity.sourceIp\", \"APIId\": \"$context.apiId\", \"ip\": \"$context.identity.sourceIp\", \"caller\": \"$context.identity.caller\", \"user\": \"$context.identity.user\", \"requestTime\": \"$context.requestTime\", \"httpMethod\": \"$context.httpMethod\", \"resourcePath\": \"$context.resourcePath\", \"status\": \"$context.status\", \"protocol\": \"$context.protocol\", \"responseLength\": \"$context.responseLength\", \"Stage\": \"$context.stage\", \"errormessage\": \"$context.error.message\", \"errormessageString\": \"$context.error.messageString\", \"responseType\": \"$context.error.responseType\", \"identitycaller\": \"$context.identity.caller\", \"integrationerror\": \"$context.integration.error\", \"integrationintegrationStatus\": \"$context.integration.integrationStatus\", \"integrationErrorMessage\": \"$context.integrationErrorMessage\", \"integrationrequestId\": \"$context.integration.requestId\", \"EndpointRequestId\": \"$context.awsEndpointRequestId\", \"awsEndpointRequestId2\": \"$context.awsEndpointRequestId2\", \"clientCertserialNumber\": \"$context.identity.clientCert.serialNumber\", \"clientCertvaliditynotBefore\": \"$context.identity.clientCert.validity.notBefore\", \"clientCertvaliditynotAfter\": \"$context.identity.clientCert.validity.notAfter\", \"requestOverrideheadername\": \"$context.requestOverride.header.header_name\", \"requestOverridepathname\": \"$context.requestOverride.path.path_name\", \"responseOverrideheadername\": \"$context.responseOverride.header.header_name\", \"responseOverridestatus\": \"$context.responseOverride.status\"}"
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": true,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "MetricsEnabled": true,
            "ResourcePath": "/*",
            "ThrottlingBurstLimit": 5000,
            "ThrottlingRateLimit": 10000
          }
        ]
      }
    }
  },
  "Outputs": {
    "APIRest": {
      "Description": "ApiRest id generated",
      "Value": { "Ref": "ApiRest" },
      "Export": { "Name": "APIRest" }
    },
    "StageName": {
      "Description": "Nombre del stage",
      "Value": { "Ref": "Stage" },
      "Export": { "Name": "ApiRestStage" }
    }
  }
}